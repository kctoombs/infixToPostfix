// token.h - class Token represents one token of an expression;
//           includes enum OpType to identify operator tokens

// DO NOT EDIT THIS FILE - you will not turn it in.

#ifndef TOKEN_H
#define TOKEN_H

#include <string>
#include <iostream>
using namespace std;

// enumeration to identify the type of an operator token
enum OpType { add, subtract, multiply, divide, power,
              leftParen, rightParen };

class Token {  // represents a number or an operator, but not both

    friend ostream& operator<< (ostream&, const Token&);
        // output function is a "friend" of this class

public:

    Token(string s);
        // construct new token object
        // throw string("bad token") if s neither number nor valid operator

    bool isNumber() const;
        // return true if this token is a number

    double value() const;
        // return the number value of this token
        // throw string("not number") if this is not a number token

    OpType op() const;
        // return the enumeration type of this operator token
        // throw string("not operator") if this is a number token

private:

    double v;     // value of the number if this is a number token
    OpType o;     // operator type if this is an operator token
    bool num;     // true if this is a number token; false if otherwise
    string s;     // original token string as passed to constructor
};

#endif
